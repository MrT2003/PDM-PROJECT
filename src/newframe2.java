package src;/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import net.proteanit.sql.DbUtils;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author NGHÄ¨A
 */
public class newframe2 extends JFrame {
    private boolean isAdmin = false;
    private boolean isDoctor = false;

    /**
     * Creates new form newframe1
     */
    public newframe2() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jList1 = new JList<>();
        jLabel2 = new JLabel();
        jTextField2 = new JTextField();
        button1 = new Button();
        jSeparator1 = new JSeparator();
        jComboBox1 = new JComboBox<>();
        button2 = new Button();
        button3 = new Button();
        jComboBox2 = new JComboBox<>();
        jScrollPane2 = new JScrollPane();
        jTable1 = new JTable();

        jList1.setModel(new AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Query:");
        jTable1.setModel(new DefaultTableModel(
                new Object [][] {
                        {null, null, null, null},
                },
                new String [] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        jTable1.setGridColor(Color.white);
        jTable1.setShowGrid(true);
        Color color = new Color(255,255,240);
        jTable1.setFont(new Font("Calibre " , Font.BOLD, 13));
        jTable1.setForeground(color);

        jScrollPane2.setViewportView(jTable1);

        button1.setLabel("Run");
        button1.setBackground(Color.GRAY);
        button1.setForeground(Color.white);
        button1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new DefaultComboBoxModel<>(new String[] { "Doctor" , "Nurse" }));

        jComboBox1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
                JComboBox CB = (JComboBox) evt.getSource();
                String selection = (String) CB.getSelectedItem();
                if (Objects.equals(selection, "Doctor")){
                    isDoctor = true;
                }
                if (Objects.equals(selection, "Nurse")){
                    isDoctor = false;
                }

                if (isDoctor == true){
                    try {
                        // TODO add your handling code here:

                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(newframe2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    String connectionUrl = "jdbc:sqlserver://localhost:1433;databaseName=Bikestore;encrypt=false;user=sa;password=Nghia2910";
                    try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement()) {
                        String Command = null;
                        if (isAdmin == true){
                            Command = "SELECT * FROM production.products";
                        }
                        if (isAdmin == false){
                            Command = "SELECT  product_name , list_price FROM production.products";
                        }
                        ResultSet rs = stmt.executeQuery(Command);
                        ResultSetMetaData rsmd = rs.getMetaData();
                        jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                        int cols = rsmd.getColumnCount();
                        System.out.println("The number of colum: " + cols);
                        String[] colName = new String[cols];
                        for (int i = 0 ; i< cols ; i++){
                            colName[i] = rsmd.getColumnName(i+1);
                            System.out.println("Column " + i + ": " + colName[i]);
                        }
                        String a , b  , c , d , g , f;
                        //  model.setColumnIdentifiers(colName);
                        while(rs.next()){// phan de show data
                            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                            model.setColumnIdentifiers(colName);
                            a = rs.getString(1);
                            b = rs.getString(2);
                            c = rs.getString(3);
                            d = rs.getString(4);
                            g = rs.getString(5);
                            f = rs.getString(6);

                            String[] row = { a , b , c ,d ,g ,f};
                            model.addRow(row);
                        }             } catch (SQLException ex) {
                        Logger.getLogger(newframe2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                if (isDoctor == false){
                    try {
                        // TODO add your handling code here:

                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(newframe2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    String connectionUrl = "jdbc:sqlserver://localhost:1433;databaseName=Bikestore;encrypt=false;user=sa;password=Nghia2910";
                    try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement()) {
                        String Command = null;
                        if (isAdmin == true){
                            Command = "SELECT product_name , brand_id , model_year , list_price FROM production.products";
                        }
                        if (isAdmin == false){
                            Command = "SELECT product_name , model_year , list_price  FROM production.products";
                        }
                        ResultSet rs = stmt.executeQuery(Command);
                        ResultSetMetaData rsmd = rs.getMetaData();
                        jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                        int cols = rsmd.getColumnCount();
                        System.out.println("The number of colum: " + cols);
                        String[] colName = new String[cols];
                        for (int i = 0 ; i< cols ; i++){
                            colName[i] = rsmd.getColumnName(i+1);
                            System.out.println("Column " + i + ": " + colName[i]);
                        }
                        String a , b  , c , d , g , f;
                        //  model.setColumnIdentifiers(colName);
                        while(rs.next()){// phan de show data
                            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                            model.setColumnIdentifiers(colName);
                            a = rs.getString(1);
                            b = rs.getString(2);
                            c = rs.getString(3);
                            d = rs.getString(4);
                            g = rs.getString(5);
                            f = rs.getString(6);

                            String[] row = { a , b , c ,d ,g ,f};
                            model.addRow(row);
                        }             } catch (SQLException ex) {
                        Logger.getLogger(newframe2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
        });

        button2.setLabel("Department");
        button2.setBackground(Color.GRAY);
        button2.setForeground(Color.white);
        button2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        button3.setLabel("History");
        button3.setBackground(Color.GRAY);
        button3.setForeground(Color.white);
        button3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                button3ActionPerformed(evt);
                try {
                    // TODO add your handling code here:

                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(newframe2.class.getName()).log(Level.SEVERE, null, ex);
                }
                String connectionUrl = "jdbc:sqlserver://localhost:1433;databaseName=Bikestore;encrypt=false;user=sa;password=Nghia2910";
                try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement()) {
                    String Command = null;
                    if (isAdmin == true){
                        Command= "SELECT product_name, product_id FROM production.products";
                    }
                    if (isAdmin == false){
                        Command = " SELECT model_year FROM production.products";
                    }
                    ResultSet rs = stmt.executeQuery(Command);
                    ResultSetMetaData rsmd = rs.getMetaData();
                    jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                    int cols = rsmd.getColumnCount();
                    System.out.println("The number of colum: " + cols);
                    String[] colName = new String[cols];
                    for (int i = 0 ; i< cols ; i++){
                        colName[i] = rsmd.getColumnName(i+1);
                        System.out.println("Column " + i + ": " + colName[i]);
                    }
                    String a , b  , c , d , g , f;
                    //  model.setColumnIdentifiers(colName);
                    while(rs.next()){// phan de show data
                        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                        model.setColumnIdentifiers(colName);
                        a = rs.getString(1);
                        b = rs.getString(2);
                        c = rs.getString(3);
                        d = rs.getString(4);
                        g = rs.getString(5);
                        f = rs.getString(6);

                        String[] row = { a , b , c ,d ,g ,f};
                        model.addRow(row);
                    }             } catch (SQLException ex) {
                    Logger.getLogger(newframe2.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        jComboBox2.setModel(new DefaultComboBoxModel<>(new String[] { "Admin" , "Patient" }));
        jComboBox2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
                JComboBox CB = (JComboBox) evt.getSource();
                String selection = (String) CB.getSelectedItem();
                if (Objects.equals(selection, "Admin")){
                    isAdmin = true;
                    JOptionPane.showMessageDialog(new JFrame(),  "Welcome back Admin");
                }
                if (Objects.equals(selection, "Patient")){
                    isAdmin = false;
                    JFrame frame = new JFrame();
                    frame.setSize(500, 300);
                    JPanel panel = new JPanel();

                    JTextField jTextField3 = new JTextField();
                    jTextField3.setColumns(30);
                    JLabel jLabel2 = new JLabel();
                    jLabel2.setForeground(Color.WHITE);

                    JLabel jLabel5 = new JLabel();
                    jLabel5.setForeground(Color.WHITE);

                    JButton button4 = new JButton("Login");

                    // Set properties
                    jLabel2.setText("Patient name:");
                    jLabel5.setText("LOGIN");
                    jLabel5.setFont(new Font("Calibre", Font.BOLD, 14));
                    String name = jTextField3.getText();

                    // Add action listener to button
                    button4.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent evt) {
                            button1ActionPerformed(evt);
                            System.out.println(name);
                            try {

                                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(newframe2.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            String connectionUrl = "jdbc:sqlserver://localhost:1433;databaseName=Bikestore;encrypt=false;user=sa;password=Nghia2910";
                            try (Connection con = DriverManager.getConnection(connectionUrl)) {
                                //   String Command = "SELECT model_year, product_name,list_price from production.products WHERE product_name = ?";
                                String Command = "SELECT model_year, product_name,list_price from production.products WHERE ltrim(rtrim(LOWER(product_name))) = LOWER(?)";
                                PreparedStatement pstmt = con.prepareStatement(Command);
                                pstmt.setString(1, name); // Bind user input to parameter 1
                                ResultSet rs = pstmt.executeQuery();
                                ResultSetMetaData rsmd = rs.getMetaData();
                                int cols = rsmd.getColumnCount();
                                System.out.println("The number of columns: " + cols);
                                String[] colName = new String[cols];
                                for (int i = 0; i< cols ; i++){
                                    colName[i] = rsmd.getColumnName(i+1);
                                    System.out.println("Column " + i + ": " + colName[i]);

                                }

                                //  model.setColumnIdentifiers(colName);
//                            //    String inputname = jTextField3.getText();
//                                JTable sample_table = new JTable();
//                                sample_table.setModel(DbUtils.resultSetToTableModel(rs));
//                                boolean userExists = false;
//                                DefaultTableModel model = (DefaultTableModel) sample_table.getModel();
//                                model.setColumnIdentifiers(colName);
//
//                                if(rs.next()) {// phan de show data
//                                    // User exists
//                                    System.out.println("True");
//                                    JOptionPane.showMessageDialog(null , "Login successfully ! ");
//                                    // Create a new ResultSet for the table
//                                    rs = pstmt.executeQuery();
//                                    sample_table.setModel(DbUtils.resultSetToTableModel(rs)); // Move this line here
//                                } else {
//                                    // User does not exist
//                                    JOptionPane.showMessageDialog(null, "User not exist ! ");
//                                }
                                if(rs.next()){
                                    JOptionPane.showMessageDialog(null,name + "login successful !");
                                }
                                else{
                                    JOptionPane.showMessageDialog(null, "Invalid name");
                                }

                            }catch (SQLException ex) {
                                Logger.getLogger(newframe2.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });

                    // Add components to panel with custom layout
                    GroupLayout layout = new GroupLayout(panel);
                    panel.setLayout(layout);

                    layout.setHorizontalGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                            .addGap(frame.getX() * 2 + 265)
                                            .addComponent(jLabel5))
                                    .addGroup(layout.createSequentialGroup()

                                            .addGap(25)
                                            .addComponent(jLabel2)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addGap(5,10,25)
                                            .addComponent(jTextField3, GroupLayout.PREFERRED_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.PREFERRED_SIZE ))
                                    .addGap(3,10,15)
                                    .addGroup(layout.createSequentialGroup()
                                            .addGap(frame.getX() * 2 + 245)
                                            .addComponent(button4))
                    );

                    layout.setVerticalGroup(
                            layout.createSequentialGroup()
                                    .addGap(30)
                                    .addComponent(jLabel5)
                                    .addGap(20)
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(jTextField3))
                                    .addGap(30)
                                    .addComponent(button4)
                    );

                    frame.add(panel);
                    frame.setResizable(false);
                    frame.setLocationRelativeTo(null);
                    frame.setVisible(true);

                }

                System.out.println("The selected item is: " + selection);

            }
        });


        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jComboBox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, 389, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button1, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))
                        .addComponent(jSeparator1)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(54, 54, 54)
                                                .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)
                                                .addGap(127, 127, 127)
                                                .addComponent(button2, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE)
                                                .addGap(136, 136, 136)
                                                .addComponent(button3, GroupLayout.PREFERRED_SIZE, 134, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 1051, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(button2, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(button1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                                .addComponent(jLabel2)
                                                                .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jComboBox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                                .addGap(53, 53, 53)
                                                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(14, 14, 14)
                                                                .addComponent(button3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(0, 0, Short.MAX_VALUE)))))
                                .addGap(46, 46, 46)
                                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 626, GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>

    private void button1ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jComboBox1ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void button2ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void button3ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jComboBox2ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        //</editor-fold>
        try {
            UIManager.setLookAndFeel(new FlatMacDarkLaf());
        } catch (UnsupportedLookAndFeelException e) {
            throw new RuntimeException(e);
        }
        /* Create and display the form */
        EventQueue.invokeLater(() -> {
            new newframe2().setVisible(true);
        });
    }

    // Variables declaration - do not modify
    private Button button1;
    private Button button2;
    private Button button3;
    private JComboBox<String> jComboBox1;
    private JComboBox<String> jComboBox2;
    private JLabel jLabel2;
    private JList<String> jList1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JSeparator jSeparator1;
    private JTable jTable1;
    private JTextField jTextField2;
    // End of variables declaration
}
